#!/usr/bin/bash

# -----------------------------------------------------------------------------
# This script takes care of my initial screen setup durint startup. Since it is
# very special to my personal setup (monitors, hostnames of my machines, etc.,
# it is probably not useful for anyone else.
#
# Depending on the hostname and the number of active monitors it calls
# different scripts. There names follow the convention:
# <HOSTNAME>_internal-<NUM_INTERNAL_MONITORS>_external-<NUM_EXTERNAL_MONITORS>.sh
# 
# These scrips were generated by **arandr** and use **xranr**, to set up my
# monitors/screens.
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# actual script
# -----------------------------------------------------------------------------

log_file="/tmp/monitor_log.txt"
echo `date` >> $log_file
echo $0 >> $log_file

LAYOUT_SCRIPT_DIR="/home/andreas/.local/share/screenlayouts"

# I cannot remember where I found the following lines to set the DISPLAY and
# XAUTHORITY environmental variables, but it is needed if this script is run as
# root and not as me.
_display=$(find /tmp/.X11-unix/* | sed s#/tmp/.X11-unix/X##)
export DISPLAY=":${_display}.0"
_xauthority=$(ps -C Xorg -f --no-header | sed -n 's/.*-auth //; s/ -[^ ].*//; p')
export XAUTHORITY=${_xauthority}

hostname=`cat /etc/hostname`
monitors=(/sys/class/drm/*/status)
num_monitors=0

for monitor in "${monitors[@]}";
do
    if [[ "connected" == $(cat "${monitor}") ]]
    then
        num_monitors=$((num_monitors + 1))
    fi
done

# Check if X recognizes the same number of monitors.
# This check is necessary, because when I plug in a new hdmi monitor, a udev
# rule is triggered that starts a systemd service that eventually runs this
# script. By the time this scripts run the new monitor might not already be
# recognizes by X and therefore the layout script will fail. In order to
# prevent this, the while loop waits until X sees the same number of monitors
# as the system does.
xrandr --auto
while [ $(xrandr --listactivemonitors | head -n 1 | cut -d " " -f2) -ne $num_monitors ]
do
    sleep 1
done

# Assuming that the lid of a laptop is open, when you start the laptop, one of
# the monitors will be the internal laptop monitor. Therefore:
num_internal_monitors=1
num_external_monitors=$((num_monitors - num_internal_monitors))

layout_script_name=`printf \
    "%s_internal-%d_external-%d.sh"\
    $hostname \
    $num_internal_monitors \
    $num_external_monitors`

layout_script_path="$LAYOUT_SCRIPT_DIR/$layout_script_name"

echo "Total:" $num_monitors "Int:" $num_internal_monitors "Ext:" $num_external_monitors "Active:" $num_active_monitors >> $log_file
echo "Layout:" $layout_script_path >> $log_file

if [ -f $layout_script_path ]
then
    $layout_script_path
fi
